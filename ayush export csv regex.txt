DELIMITER $$

DROP PROCEDURE IF EXISTS find_sensitive_data_comprehensive$$
DROP TEMPORARY TABLE IF EXISTS temp_sensitive_data_results$$

CREATE PROCEDURE find_sensitive_data_comprehensive()
BEGIN
    -- == DECLARATIONS ==
    DECLARE done INT DEFAULT 0;
    DECLARE tbl VARCHAR(255);
    DECLARE col VARCHAR(255);
    DECLARE current_value TEXT;
    DECLARE has_match_in_table BOOLEAN;
    DECLARE i INT;
    DECLARE occurrence_counter INT;
    
    -- Counters for summary
    DECLARE v_actual_tables INT DEFAULT 0;
    DECLARE v_total_columns INT DEFAULT 0;
    DECLARE v_tables_with_match INT DEFAULT 0;
    DECLARE v_failed_checks INT DEFAULT 0;
    
    -- File handling
    DECLARE output_file VARCHAR(255) DEFAULT '/tmp/sensitive_data_report.csv';

    -- Cursor for all text-based columns
    DECLARE cur CURSOR FOR
        SELECT TABLE_NAME, COLUMN_NAME
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_SCHEMA = DATABASE()
          AND DATA_TYPE IN ('char', 'varchar', 'text', 'longtext', 'mediumtext', 'tinytext');

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
        SET v_failed_checks = v_failed_checks + 1;
    END;

    -- Create temporary table for results
    CREATE TEMPORARY TABLE IF NOT EXISTS temp_sensitive_data_results (
        table_name VARCHAR(255),
        column_name VARCHAR(255),
        matched_value TEXT,
        pattern_type VARCHAR(50)
    );

    TRUNCATE TABLE temp_sensitive_data_results;

    -- == INITIALIZATION ==
    SELECT COUNT(DISTINCT TABLE_NAME) INTO v_actual_tables
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_SCHEMA = DATABASE();

    OPEN cur;

    -- == MAIN PROCESSING LOOP ==
    read_loop: LOOP
        FETCH cur INTO tbl, col;
        IF done THEN LEAVE read_loop; END IF;
        
        SET v_total_columns = v_total_columns + 1;
        SET has_match_in_table = FALSE;

        -- Get sample values
        SET @sql = CONCAT('SELECT `', col, '` INTO @val1 FROM `', tbl, 
                         '` WHERE `', col, '` IS NOT NULL AND `', col, 
                         '` != \'\' LIMIT 1');
        PREPARE stmt FROM @sql; EXECUTE stmt; DEALLOCATE PREPARE stmt;
        
        SET @sql = CONCAT('SELECT `', col, '` INTO @val2 FROM `', tbl, 
                         '` WHERE `', col, '` IS NOT NULL AND `', col, 
                         '` != \'\' LIMIT 1 OFFSET 1');
        PREPARE stmt FROM @sql; EXECUTE stmt; DEALLOCATE PREPARE stmt;

        -- Process sample values with all regex patterns
        SET i = 1;
        WHILE i <= 2 DO
            IF i = 1 THEN SET current_value = @val1;
            ELSE SET current_value = @val2;
            END IF;

            IF current_value IS NOT NULL THEN
                -- Process each regex pattern
                CALL process_regex_pattern(tbl, col, current_value, '[A-Z]{2}[0-9]{2}[\\s-]?[0-9]{4}[0-9]{7}', 'DL_REGEX');
                CALL process_regex_pattern(tbl, col, current_value, '[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z][A-Z0-9]Z[A-Z0-9]', 'GSTIN_REGEX');
                CALL process_regex_pattern(tbl, col, current_value, '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', 'IP_REGEX');
                CALL process_regex_pattern(tbl, col, current_value, '([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})', 'MAC_REGEX');
                CALL process_regex_pattern(tbl, col, current_value, '-?[0-9]{1,3}\\.[0-9]+,\\s*-?[0-9]{1,3}\\.[0-9]+', 'COORD_REGEX');
                CALL process_regex_pattern(tbl, col, current_value, '[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}', 'EMAIL_REGEX');
                CALL process_regex_pattern(tbl, col, current_value, '(\\+91|91|0)?[6-9][0-9]{9}', 'MOBILE_REGEX');
                CALL process_regex_pattern(tbl, col, current_value, '[A-Z]{5}[0-9]{4}[A-Z]', 'PAN_REGEX');
                CALL process_regex_pattern(tbl, col, current_value, '[a-zA-Z0-9.\\-_]{2,256}@[a-zA-Z]{2,64}', 'UPI_REGEX');
                CALL process_regex_pattern(tbl, col, current_value, '[A-Z]{3}[0-9]{7}', 'VOTERID_REGEX');
                CALL process_regex_pattern(tbl, col, current_value, '4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|6(?:011|5[0-9]{2})[0-9]{12}', 'CARD_REGEX');

                SET has_match_in_table = TRUE;
            END IF;
            SET i = i + 1;
        END WHILE;

        -- Track tables with matches
        IF has_match_in_table THEN
            IF NOT EXISTS (
                SELECT 1 FROM temp_sensitive_data_results WHERE table_name = tbl LIMIT 1
            ) THEN
                SET v_tables_with_match = v_tables_with_match + 1;
            END IF;
        END IF;
    END LOOP;

    CLOSE cur;

    -- == EXPORT TO CSV FILE ==
    SET @export_sql = CONCAT(
        "SELECT 'table_name','column_name','matched_value','pattern_type' ",
        "UNION ALL ",
        "SELECT * FROM temp_sensitive_data_results ",
        "INTO OUTFILE '", output_file, "' ",
        "FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' ",
        "LINES TERMINATED BY '\n'"
    );
    PREPARE stmt FROM @export_sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

    -- == OUTPUT RESULTS ==
    SELECT CONCAT('CSV report generated at: ', output_file) AS Message;

    -- == DETAILED SUMMARY REPORT ==
    SELECT '========================================' AS '--- Summary Report ---'
    UNION ALL
    SELECT CONCAT('Total Tables in Database: ', v_actual_tables)
    UNION ALL
    SELECT CONCAT('Text Columns Scanned: ', v_total_columns)
    UNION ALL
    SELECT CONCAT('Tables with Sensitive Data: ', v_tables_with_match)
    UNION ALL
    SELECT CONCAT('Failed Column Checks: ', v_failed_checks);

    -- Clean up
    DROP TEMPORARY TABLE IF EXISTS temp_sensitive_data_results;
END$$

-- Helper procedure to process regex patterns
DELIMITER $$
CREATE PROCEDURE process_regex_pattern(
    IN p_table_name VARCHAR(255),
    IN p_column_name VARCHAR(255),
    IN p_value TEXT,
    IN p_pattern VARCHAR(255),
    IN p_pattern_type VARCHAR(50)
)
BEGIN
    DECLARE v_match TEXT;
    DECLARE v_counter INT DEFAULT 1;
    
    regex_loop: LOOP
        SET v_match = REGEXP_SUBSTR(p_value, p_pattern, 1, v_counter);
        IF v_match IS NULL THEN LEAVE regex_loop; END IF;
        
        INSERT INTO temp_sensitive_data_results VALUES (p_table_name, p_column_name, v_match, p_pattern_type);
        
        SET v_counter = v_counter + 1;
        IF v_counter > 2 THEN LEAVE regex_loop; END IF; -- Limit to 3 matches per pattern
    END LOOP;
END$$
DELIMITER ;
