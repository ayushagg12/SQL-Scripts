DELIMITER $$

DROP PROCEDURE IF EXISTS find_all_sensitive_data_full$$

CREATE PROCEDURE find_all_sensitive_data_full()
BEGIN
    -- == DECLARATIONS ==
    DECLARE done INT DEFAULT 0;
    DECLARE tbl VARCHAR(255);
    DECLARE col VARCHAR(255);
    DECLARE current_value TEXT;
    DECLARE has_match_in_table BOOLEAN;
    DECLARE i INT; -- Loop counter for the 2 sample rows
    DECLARE occurrence_counter INT; -- Loop counter for multiple matches within one field
    DECLARE matched_substring TEXT;

    -- Counters for the final summary
    DECLARE v_actual_tables INT DEFAULT 0;
    DECLARE v_total_columns_scanned INT DEFAULT 0;
    DECLARE v_tables_with_match INT DEFAULT 0;
    
    -- Result string, initialized with the CSV header
    DECLARE result TEXT DEFAULT '"table_name","column_name","matched_value","pattern_type"';
    DECLARE tables_with_matches_list TEXT DEFAULT '';

    -- Cursor to iterate over all text-based columns in the current database
    DECLARE cur CURSOR FOR
        SELECT TABLE_NAME, COLUMN_NAME
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_SCHEMA = DATABASE()
          AND DATA_TYPE IN ('char', 'varchar', 'text', 'longtext', 'mediumtext', 'tinytext');

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    -- A general handler for potential dynamic SQL errors
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN END;

    -- == INITIALIZATION ==
    SELECT COUNT(DISTINCT TABLE_NAME) INTO v_actual_tables
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_SCHEMA = DATABASE();

    OPEN cur;

    -- == MAIN LOOP: Iterate over each column ==
    read_loop: LOOP
        FETCH cur INTO tbl, col;
        IF done THEN LEAVE read_loop; END IF;
        
        SET v_total_columns_scanned = v_total_columns_scanned + 1;
        SET has_match_in_table = FALSE;

        -- == EFFICIENCY CORE: Fetch up to 2 sample non-empty rows from the current column ==
        SET @sql_fetch_1 = CONCAT('SELECT `', col, '` INTO @val1 FROM `', tbl, '` WHERE `', col, '` IS NOT NULL AND `', col, '` != \'\' LIMIT 1');
        SET @sql_fetch_2 = CONCAT('SELECT `', col, '` INTO @val2 FROM `', tbl, '` WHERE `', col, '` IS NOT NULL AND `', col, '` != \'\' LIMIT 1 OFFSET 1');

        SET @val1 = NULL;
        SET @val2 = NULL;

        PREPARE stmt1 FROM @sql_fetch_1; EXECUTE stmt1; DEALLOCATE PREPARE stmt1;
        PREPARE stmt2 FROM @sql_fetch_2; EXECUTE stmt2; DEALLOCATE PREPARE stmt2;

        -- == LOOP to process the 2 fetched values ==
        SET i = 1;
        WHILE i <= 2 DO
            IF i = 1 THEN SET current_value = @val1;
            ELSE SET current_value = @val2;
            END IF;

            IF current_value IS NOT NULL THEN
                
                -- == PRECISION SCAN: For each pattern, loop to find ALL occurrences in the field ==
                
                -- EMAIL --
                SET occurrence_counter = 1; find_all_loop: LOOP
                    SET matched_substring = REGEXP_SUBSTR(current_value, '[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}', 1, occurrence_counter);
                    IF matched_substring IS NULL THEN LEAVE find_all_loop; END IF;
                    SET result=CONCAT(result,'\n','"',tbl,'","',col,'","',REPLACE(matched_substring, '"', '""'),'","EMAIL_REGEX"'), has_match_in_table=TRUE;
                    SET occurrence_counter = occurrence_counter + 1; END LOOP;
                
                -- MOBILE --
                SET occurrence_counter = 1; find_all_loop: LOOP
                    SET matched_substring = REGEXP_SUBSTR(current_value, '(\\+91|91|0)?[6-9][0-9]{9}', 1, occurrence_counter);
                    IF matched_substring IS NULL THEN LEAVE find_all_loop; END IF;
                    SET result=CONCAT(result,'\n','"',tbl,'","',col,'","',REPLACE(matched_substring, '"', '""'),'","MOBILE_REGEX"'), has_match_in_table=TRUE;
                    SET occurrence_counter = occurrence_counter + 1; END LOOP;
                
               
                SET occurrence_counter = 1; find_all_loop: LOOP
                    SET matched_substring = REGEXP_SUBSTR(current_value, '4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|6(?:011|5[0-9]{2})[0-9]{12}', 1, occurrence_counter);
                    IF matched_substring IS NULL THEN LEAVE find_all_loop; END IF;
                    SET result=CONCAT(result,'\n','"',tbl,'","',col,'","',REPLACE(matched_substring, '"', '""'),'","CARD_REGEX"'), has_match_in_table=TRUE;
                    SET occurrence_counter = occurrence_counter + 1; END LOOP;

             
                SET occurrence_counter = 1; find_all_loop: LOOP
                    SET matched_substring = REGEXP_SUBSTR(current_value, '[A-Z]{5}[0-9]{4}[A-Z]', 1, occurrence_counter);
                    IF matched_substring IS NULL THEN LEAVE find_all_loop; END IF;
                    SET result=CONCAT(result,'\n','"',tbl,'","',col,'","',REPLACE(matched_substring, '"', '""'),'","PAN_REGEX"'), has_match_in_table=TRUE;
                    SET occurrence_counter = occurrence_counter + 1; END LOOP;
                
               
                SET occurrence_counter = 1; find_all_loop: LOOP
                    SET matched_substring = REGEXP_SUBSTR(current_value, '[A-Z]{2}[0-9]{2}[\\s-]?[0-9]{4}[0-9]{7}', 1, occurrence_counter);
                    IF matched_substring IS NULL THEN LEAVE find_all_loop; END IF;
                    SET result=CONCAT(result,'\n','"',tbl,'","',col,'","',REPLACE(matched_substring, '"', '""'),'","DL_REGEX"'), has_match_in_table=TRUE;
                    SET occurrence_counter = occurrence_counter + 1; END LOOP;
                
             
                SET occurrence_counter = 1; find_all_loop: LOOP
                    SET matched_substring = REGEXP_SUBSTR(current_value, '[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z][A-Z0-9]Z[A-Z0-9]', 1, occurrence_counter);
                    IF matched_substring IS NULL THEN LEAVE find_all_loop; END IF;
                    SET result=CONCAT(result,'\n','"',tbl,'","',col,'","',REPLACE(matched_substring, '"', '""'),'","GSTIN_REGEX"'), has_match_in_table=TRUE;
                    SET occurrence_counter = occurrence_counter + 1; END LOOP;

                
                SET occurrence_counter = 1; find_all_loop: LOOP
                    SET matched_substring = REGEXP_SUBSTR(current_value, '[A-Z]{3}[0-9]{7}', 1, occurrence_counter);
                    IF matched_substring IS NULL THEN LEAVE find_all_loop; END IF;
                    SET result=CONCAT(result,'\n','"',tbl,'","',col,'","',REPLACE(matched_substring, '"', '""'),'","VOTERID_REGEX"'), has_match_in_table=TRUE;
                    SET occurrence_counter = occurrence_counter + 1; END LOOP;

               
                SET occurrence_counter = 1; find_all_loop: LOOP
                    SET matched_substring = REGEXP_SUBSTR(current_value, '[a-zA-Z0-9.\\-_]{2,256}@[a-zA-Z]{2,64}', 1, occurrence_counter);
                    IF matched_substring IS NOT NULL AND LOCATE('.', matched_substring) = 0 THEN
                        SET result=CONCAT(result,'\n','"',tbl,'","',col,'","',REPLACE(matched_substring, '"', '""'),'","UPI_REGEX"'), has_match_in_table=TRUE;
                    END IF;
                    IF matched_substring IS NULL THEN LEAVE find_all_loop; END IF;
                    SET occurrence_counter = occurrence_counter + 1; END LOOP;

                -- IP ADDRESS --
                SET occurrence_counter = 1; find_all_loop: LOOP
                    SET matched_substring = REGEXP_SUBSTR(current_value, '([0-9]{1,3}\\.){3}[0-9]{1,3}', 1, occurrence_counter);
                    IF matched_substring IS NULL THEN LEAVE find_all_loop; END IF;
                    SET result=CONCAT(result,'\n','"',tbl,'","',col,'","',REPLACE(matched_substring, '"', '""'),'","IP_REGEX"'), has_match_in_table=TRUE;
                    SET occurrence_counter = occurrence_counter + 1; END LOOP;

                -- MAC ADDRESS --
                SET occurrence_counter = 1; find_all_loop: LOOP
                    SET matched_substring = REGEXP_SUBSTR(current_value, '([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})', 1, occurrence_counter);
                    IF matched_substring IS NULL THEN LEAVE find_all_loop; END IF;
                    SET result=CONCAT(result,'\n','"',tbl,'","',col,'","',REPLACE(matched_substring, '"', '""'),'","MAC_REGEX"'), has_match_in_table=TRUE;
                    SET occurrence_counter = occurrence_counter + 1; END LOOP;

                -- COORDINATES --
                SET occurrence_counter = 1; find_all_loop: LOOP
                    SET matched_substring = REGEXP_SUBSTR(current_value, '-?[0-9]{1,3}\\.[0-9]+,\\s*-?[0-9]{1,3}\\.[0-9]+', 1, occurrence_counter);
                    IF matched_substring IS NULL THEN LEAVE find_all_loop; END IF;
                    SET result=CONCAT(result,'\n','"',tbl,'","',col,'","',REPLACE(matched_substring, '"', '""'),'","COORD_REGEX"'), has_match_in_table=TRUE;
                    SET occurrence_counter = occurrence_counter + 1; END LOOP;
                
            END IF;
            
            SET i = i + 1;
        END WHILE;

        -- Track tables that have at least one match
        IF has_match_in_table AND LOCATE(CONCAT(',', tbl, ','), CONCAT(',', tables_with_matches_list, ',')) = 0 THEN
            SET v_tables_with_match = v_tables_with_match + 1;
            SET tables_with_matches_list = CONCAT(tables_with_matches_list, tbl, ',');
        END IF;

    END LOOP;
    CLOSE cur;

    -- == FINAL OUTPUT ==
    -- Output 1: The CSV Data
    IF LENGTH(result) > LENGTH('"table_name","column_name","matched_value","pattern_type"') THEN
        SELECT result AS CSV_Output;
    ELSE
        SELECT CONCAT('No sensitive data found. Scanned ', v_total_columns_scanned, 
                     ' columns across ', v_actual_tables, ' tables.') AS Scan_Result;
    END IF;

    -- Output 2: The Summary Report
    SELECT '========================================' AS '--- Summary ---'
    UNION ALL SELECT CONCAT('Total Tables in Database: ', v_actual_tables)
    UNION ALL SELECT CONCAT('Text Columns Scanned: ', v_total_columns_scanned)
    UNION ALL SELECT CONCAT('Tables with Potential Sensitive Data: ', v_tables_with_match)
    UNION ALL SELECT '========================================';
END$$

DELIMITER ;
