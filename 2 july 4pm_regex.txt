DELIMITER $$

DROP PROCEDURE IF EXISTS find_sensitive_data_in_db$$

CREATE PROCEDURE find_sensitive_data_in_db()
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE tbl VARCHAR(255);
    DECLARE col VARCHAR(255);
    
    DECLARE v_actual_tables INT DEFAULT 0;
    DECLARE v_total_columns INT DEFAULT 0;
    DECLARE v_tables_with_match INT DEFAULT 0;
    DECLARE v_failed_checks INT DEFAULT 0;
    
    DECLARE result TEXT DEFAULT 'table_name,column_name,matched_value,pattern_type';
    DECLARE tables_with_matches TEXT DEFAULT '';
    
    DECLARE cur CURSOR FOR
        SELECT TABLE_NAME, COLUMN_NAME
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_SCHEMA = DATABASE()
          AND DATA_TYPE IN ('varchar', 'char', 'text', 'longtext', 'mediumtext', 'tinytext');

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    SELECT COUNT(DISTINCT TABLE_NAME) INTO v_actual_tables
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_SCHEMA = DATABASE();

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO tbl, col;
        IF done THEN LEAVE read_loop; END IF;
        
        SET v_total_columns = v_total_columns + 1;

        BEGIN
            DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
            BEGIN
                SET v_failed_checks = v_failed_checks + 1;
            END;

            -- Variables to store results for each pattern
            SET @dl_result = NULL;
            SET @gstin_result = NULL;
            SET @ip_result = NULL;
            SET @mac_result = NULL;
            SET @coord_result = NULL;
            SET @email_result = NULL;
            SET @mobile_result = NULL;
            SET @pan_result = NULL;
            SET @upi_result = NULL;
            SET @voterid_result = NULL;
            SET @card_result = NULL;

            -- Check for Driving License (DL) pattern - Indian format
            SET @sql = CONCAT(
                "SELECT GROUP_CONCAT(DISTINCT CONCAT('\"", tbl, "\",\"", col, "\",\"', ",
                "REGEXP_SUBSTR(", col, ", '[A-Z]{2}[0-9]{2}[0-9]{4}[0-9]{7}'), ",
                "'\",\"DL_REGEX\"') SEPARATOR '\n') INTO @dl_result ",
                "FROM (SELECT ", col, " FROM ", tbl, " WHERE ", col, " IS NOT NULL LIMIT 2) AS temp_table ",
                "WHERE ", col, " REGEXP '[A-Z]{2}[0-9]{2}[0-9]{4}[0-9]{7}'"
            );
            PREPARE stmt FROM @sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;

            -- Check for GSTIN pattern (Indian GST number)
            SET @sql = CONCAT(
                "SELECT GROUP_CONCAT(DISTINCT CONCAT('\"", tbl, "\",\"", col, "\",\"', ",
                "REGEXP_SUBSTR(", col, ", '[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}'), ",
                "'\",\"GSTIN_REGEX\"') SEPARATOR '\n') INTO @gstin_result ",
                "FROM (SELECT ", col, " FROM ", tbl, " WHERE ", col, " IS NOT NULL LIMIT 2) AS temp_table ",
                "WHERE ", col, " REGEXP '[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}'"
            );
            PREPARE stmt FROM @sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;

            -- Check for IP address (IPv4)
            SET @sql = CONCAT(
                "SELECT GROUP_CONCAT(DISTINCT CONCAT('\"", tbl, "\",\"", col, "\",\"', ",
                "REGEXP_SUBSTR(", col, ", '([0-9]{1,3}\\\\.){3}[0-9]{1,3}'), ",
                "'\",\"IP_REGEX\"') SEPARATOR '\n') INTO @ip_result ",
                "FROM (SELECT ", col, " FROM ", tbl, " WHERE ", col, " IS NOT NULL LIMIT 2) AS temp_table ",
                "WHERE ", col, " REGEXP '([0-9]{1,3}\\\\.){3}[0-9]{1,3}'"
            );
            PREPARE stmt FROM @sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;

            -- Check for email addresses
            SET @sql = CONCAT(
                "SELECT GROUP_CONCAT(DISTINCT CONCAT('\"", tbl, "\",\"", col, "\",\"', ",
                "REGEXP_SUBSTR(", col, ", '[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}'), ",
                "'\",\"EMAIL_REGEX\"') SEPARATOR '\n') INTO @email_result ",
                "FROM (SELECT ", col, " FROM ", tbl, " WHERE ", col, " IS NOT NULL LIMIT 2) AS temp_table ",
                "WHERE ", col, " REGEXP '[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}'"
            );
            PREPARE stmt FROM @sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;

            -- Check for Indian mobile numbers
            SET @sql = CONCAT(
                "SELECT GROUP_CONCAT(DISTINCT CONCAT('\"", tbl, "\",\"", col, "\",\"', ",
                "REGEXP_SUBSTR(", col, ", '(\\\\+91|91|0)?[6-9][0-9]{9}'), ",
                "'\",\"MOBILE_REGEX\"') SEPARATOR '\n') INTO @mobile_result ",
                "FROM (SELECT ", col, " FROM ", tbl, " WHERE ", col, " IS NOT NULL LIMIT 2) AS temp_table ",
                "WHERE ", col, " REGEXP '(\\\\+91|91|0)?[6-9][0-9]{9}'"
            );
            PREPARE stmt FROM @sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;

            -- Check for PAN (Indian Permanent Account Number)
            SET @sql = CONCAT(
                "SELECT GROUP_CONCAT(DISTINCT CONCAT('\"", tbl, "\",\"", col, "\",\"', ",
                "REGEXP_SUBSTR(", col, ", '[A-Z]{5}[0-9]{4}[A-Z]'), ",
                "'\",\"PAN_REGEX\"') SEPARATOR '\n') INTO @pan_result ",
                "FROM (SELECT ", col, " FROM ", tbl, " WHERE ", col, " IS NOT NULL LIMIT 2) AS temp_table ",
                "WHERE ", col, " REGEXP '[A-Z]{5}[0-9]{4}[A-Z]'"
            );
            PREPARE stmt FROM @sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;

            -- Check for UPI IDs (working implementation)
            SET @sql = CONCAT(
                "SELECT GROUP_CONCAT(DISTINCT CONCAT('\"", tbl, "\",\"", col, "\",\"', ",
                "REGEXP_SUBSTR(", col, ", '[A-Za-z0-9._%+-]+@[a-zA-Z]+'), ",
                "'\",\"UPI_REGEX\"') SEPARATOR '\n') INTO @upi_result ",
                "FROM (SELECT ", col, " FROM ", tbl, " WHERE ", col, " IS NOT NULL LIMIT 2) AS temp_table ",
                "WHERE ", col, " REGEXP '[a-zA-Z0-9.-]+@[a-zA-Z]+' ",
                "AND ", col, " NOT REGEXP '@.*\\\\.' ",
                "AND LENGTH(", col, ") BETWEEN 10 AND 30"
            );
            PREPARE stmt FROM @sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;

            -- Append results to output if found
            IF @dl_result IS NOT NULL THEN SET result = CONCAT(result, '\n', @dl_result); END IF;
            IF @gstin_result IS NOT NULL THEN SET result = CONCAT(result, '\n', @gstin_result); END IF;
            IF @ip_result IS NOT NULL THEN SET result = CONCAT(result, '\n', @ip_result); END IF;
            IF @email_result IS NOT NULL THEN SET result = CONCAT(result, '\n', @email_result); END IF;
            IF @mobile_result IS NOT NULL THEN SET result = CONCAT(result, '\n', @mobile_result); END IF;
            IF @pan_result IS NOT NULL THEN SET result = CONCAT(result, '\n', @pan_result); END IF;
            IF @upi_result IS NOT NULL THEN SET result = CONCAT(result, '\n', @upi_result); END IF;

            -- Track tables with matches
            IF (@dl_result IS NOT NULL OR @gstin_result IS NOT NULL OR 
                @ip_result IS NOT NULL OR @email_result IS NOT NULL OR
                @mobile_result IS NOT NULL OR @pan_result IS NOT NULL OR
                @upi_result IS NOT NULL) THEN
                
                IF LOCATE(CONCAT(',', tbl, ','), CONCAT(',', tables_with_matches, ',')) = 0 THEN
                    SET v_tables_with_match = v_tables_with_match + 1;
                    SET tables_with_matches = CONCAT(tables_with_matches, ',', tbl);
                END IF;
            END IF;
        END;
    END LOOP;

    CLOSE cur;

    -- Output results
    IF LENGTH(result) > LENGTH('table_name,column_name,matched_value,pattern_type') THEN
        SELECT REPLACE(result, '\n', '\r\n') AS CSV_Output;
    ELSE
        SELECT CONCAT('No sensitive data found in first 2 rows. Scanned ', v_total_columns, 
                     ' columns across ', v_actual_tables, ' tables.') AS CSV_Output;
    END IF;

    -- Output summary
    SELECT '========================================' AS SummaryLine
    UNION ALL
    SELECT CONCAT('Actual Tables in Database: ', v_actual_tables) AS SummaryLine
    UNION ALL
    SELECT CONCAT('Columns Scanned: ', v_total_columns) AS SummaryLine
    UNION ALL
    SELECT CONCAT('Tables with Sensitive Data: ', v_tables_with_match) AS SummaryLine
    UNION ALL
    SELECT CONCAT('Failed Column Scans: ', v_failed_checks) AS SummaryLine
    UNION ALL
    SELECT '========================================' AS SummaryLine;
END$$

DELIMITER ;
